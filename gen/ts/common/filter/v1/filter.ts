// @generated by protobuf-ts 2.2.2 with parameter long_type_string
// @generated from protobuf file "common/filter/v1/filter.proto" (package "common.filter.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.filter.v1.Pagination
 */
export interface Pagination {
    /**
     * @generated from protobuf field: uint64 limit = 1;
     */
    limit: string;
    /**
     * @generated from protobuf field: uint64 offset = 2;
     */
    offset: string;
}
/**
 * Filter for string values, example: ?email.op=eq&email.val=me@example.com
 *
 * @generated from protobuf message common.filter.v1.StringFieldFilter
 */
export interface StringFieldFilter {
    /**
     * @generated from protobuf field: common.filter.v1.StringFieldFilter.Operator op = 1;
     */
    op: StringFieldFilter_Operator;
    /**
     * @generated from protobuf field: string val = 2;
     */
    val: string;
}
/**
 * @generated from protobuf enum common.filter.v1.StringFieldFilter.Operator
 */
export enum StringFieldFilter_Operator {
    /**
     * @generated from protobuf enum value: OPERATOR_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OPERATOR_EQ = 1;
     */
    EQ = 1,
    /**
     * @generated from protobuf enum value: OPERATOR_NEQ = 2;
     */
    NEQ = 2,
    /**
     * @generated from protobuf enum value: OPERATOR_LIKE = 3;
     */
    LIKE = 3
}
/**
 * Filter for int values, example: ?age.op=gt&age.val=18
 *
 * @generated from protobuf message common.filter.v1.IntFieldFilter
 */
export interface IntFieldFilter {
    /**
     * @generated from protobuf field: common.filter.v1.IntFieldFilter.Operator op = 1;
     */
    op: IntFieldFilter_Operator;
    /**
     * @generated from protobuf field: string val = 2;
     */
    val: string;
}
/**
 * @generated from protobuf enum common.filter.v1.IntFieldFilter.Operator
 */
export enum IntFieldFilter_Operator {
    /**
     * @generated from protobuf enum value: OPERATOR_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OPERATOR_EQ = 1;
     */
    EQ = 1,
    /**
     * @generated from protobuf enum value: OPERATOR_NEQ = 2;
     */
    NEQ = 2,
    /**
     * @generated from protobuf enum value: OPERATOR_LT = 3;
     */
    LT = 3,
    /**
     * @generated from protobuf enum value: OPERATOR_LTE = 4;
     */
    LTE = 4,
    /**
     * @generated from protobuf enum value: OPERATOR_GT = 5;
     */
    GT = 5,
    /**
     * @generated from protobuf enum value: OPERATOR_GTE = 6;
     */
    GTE = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class Pagination$Type extends MessageType<Pagination> {
    constructor() {
        super("common.filter.v1.Pagination", [
            { no: 1, name: "limit", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "offset", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<Pagination>): Pagination {
        const message = { limit: "0", offset: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Pagination>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pagination): Pagination {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 limit */ 1:
                    message.limit = reader.uint64().toString();
                    break;
                case /* uint64 offset */ 2:
                    message.offset = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pagination, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 limit = 1; */
        if (message.limit !== "0")
            writer.tag(1, WireType.Varint).uint64(message.limit);
        /* uint64 offset = 2; */
        if (message.offset !== "0")
            writer.tag(2, WireType.Varint).uint64(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.filter.v1.Pagination
 */
export const Pagination = new Pagination$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringFieldFilter$Type extends MessageType<StringFieldFilter> {
    constructor() {
        super("common.filter.v1.StringFieldFilter", [
            { no: 1, name: "op", kind: "enum", T: () => ["common.filter.v1.StringFieldFilter.Operator", StringFieldFilter_Operator, "OPERATOR_"] },
            { no: 2, name: "val", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringFieldFilter>): StringFieldFilter {
        const message = { op: 0, val: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StringFieldFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringFieldFilter): StringFieldFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.filter.v1.StringFieldFilter.Operator op */ 1:
                    message.op = reader.int32();
                    break;
                case /* string val */ 2:
                    message.val = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringFieldFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.filter.v1.StringFieldFilter.Operator op = 1; */
        if (message.op !== 0)
            writer.tag(1, WireType.Varint).int32(message.op);
        /* string val = 2; */
        if (message.val !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.val);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.filter.v1.StringFieldFilter
 */
export const StringFieldFilter = new StringFieldFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntFieldFilter$Type extends MessageType<IntFieldFilter> {
    constructor() {
        super("common.filter.v1.IntFieldFilter", [
            { no: 1, name: "op", kind: "enum", T: () => ["common.filter.v1.IntFieldFilter.Operator", IntFieldFilter_Operator, "OPERATOR_"] },
            { no: 2, name: "val", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IntFieldFilter>): IntFieldFilter {
        const message = { op: 0, val: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntFieldFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntFieldFilter): IntFieldFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.filter.v1.IntFieldFilter.Operator op */ 1:
                    message.op = reader.int32();
                    break;
                case /* string val */ 2:
                    message.val = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntFieldFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.filter.v1.IntFieldFilter.Operator op = 1; */
        if (message.op !== 0)
            writer.tag(1, WireType.Varint).int32(message.op);
        /* string val = 2; */
        if (message.val !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.val);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.filter.v1.IntFieldFilter
 */
export const IntFieldFilter = new IntFieldFilter$Type();
